/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package healthcare.UserInterface.NurseWorkArea;

import healthcare.Commons.WorkRequestStatusType;
import healthcare.Department.Department;
import healthcare.Department.DepartmentType;
import healthcare.Enterprise.Enterprise;
import healthcare.Person.Person;
import healthcare.Encounter.Encounter;
import healthcare.Patient.Patient;
import healthcare.WorkQueue.EnterprisePatientProfileSearchWorkRequest;
import healthcare.WorkQueue.PatientProfileWorkRequest;
import healthcare.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Muddassar
 */
public class PatientProfileRequestsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Person searchedPatient;
    /**
     * Creates new form PatientProfileRequestsJPanel
     */
    public PatientProfileRequestsJPanel(JPanel upc, Enterprise ent) {
        initComponents();
        this.userProcessContainer = upc;
        this.enterprise = ent;
        this.populateTable();
    }
    
    private void clearTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblEncounters.getModel();
        model.setRowCount(0);
    }
    
    private void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblPatientProfileRequests.getModel();
        
        model.setRowCount(0);
        
        for (WorkRequest request : this.enterprise.getWorkQueue().getWorkRequestList()){
            if((request instanceof EnterprisePatientProfileSearchWorkRequest) && !request.getStatus().equals(WorkRequestStatusType.Completed))
            {
                Object[] row = new Object[4];
                row[0] = request;
                EnterprisePatientProfileSearchWorkRequest profileWorkRequest = (EnterprisePatientProfileSearchWorkRequest)request;
                PatientProfileWorkRequest workRequest = profileWorkRequest.getPatientProfileWorkRequest();
                if(workRequest != null)
                {
                    row[1] = workRequest.getPatient();
                    row[2] = workRequest.getSender().getPerson();
                    row[3] = workRequest.getRequestingEnterprise();
                    model.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientProfileRequests = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEncounters = new javax.swing.JTable();
        btnListEncounters = new javax.swing.JButton();
        btnProcessRequest = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        tblPatientProfileRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Patient", "Request From", "Req Enterprise"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientProfileRequests);
        if (tblPatientProfileRequests.getColumnModel().getColumnCount() > 0) {
            tblPatientProfileRequests.getColumnModel().getColumn(0).setResizable(false);
            tblPatientProfileRequests.getColumnModel().getColumn(1).setResizable(false);
            tblPatientProfileRequests.getColumnModel().getColumn(2).setResizable(false);
            tblPatientProfileRequests.getColumnModel().getColumn(3).setResizable(false);
        }

        tblEncounters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "Date", "EncounterStatus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblEncounters);
        if (tblEncounters.getColumnModel().getColumnCount() > 0) {
            tblEncounters.getColumnModel().getColumn(0).setResizable(false);
            tblEncounters.getColumnModel().getColumn(1).setResizable(false);
            tblEncounters.getColumnModel().getColumn(2).setResizable(false);
        }

        btnListEncounters.setText("List Encounters");
        btnListEncounters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListEncountersActionPerformed(evt);
            }
        });

        btnProcessRequest.setText("Process Request");
        btnProcessRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessRequestActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(136, 136, 136)
                        .addComponent(btnProcessRequest))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnListEncounters)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnListEncounters)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcessRequest)
                    .addComponent(btnBack)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnListEncountersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListEncountersActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatientProfileRequests.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel)tblEncounters.getModel();
        dtm.setRowCount(0);
        Patient patient = (Patient)tblPatientProfileRequests.getValueAt(selectedRow, 1);
        Department patientDepartment = this.enterprise.getDepartment(DepartmentType.Patient);
        searchedPatient = patientDepartment.getPersonDirectory().searchPerson(patient.getSsn());
        if(searchedPatient != null && (searchedPatient instanceof Patient))
        {
            Patient searchedResult = (Patient)searchedPatient;
            searchedResult.getAllergyHistory().getAllergyList();
            for(Encounter encounter : searchedResult.getEncounterHistory().getEncounterList())
            {
                Object[] row = new Object[3];
                row[0] = false;
                row[1] = encounter;
                row[2] = encounter;
                dtm.addRow(row);
            }
        }
        else
        {
            PatientProfileWorkRequest wr = (PatientProfileWorkRequest)tblPatientProfileRequests
            .getValueAt(selectedRow, 0);
             wr.setStatus(WorkRequestStatusType.Completed);
            JOptionPane.showMessageDialog(null,"No patient found");
            this.populateTable();
        }
        Logger logger = Logger.getLogger(this.getClass().toString());
        logger.log(Level.INFO,String.format("Search requested for patient with name:%s ", patient.getName()));
        
    }//GEN-LAST:event_btnListEncountersActionPerformed

    private void btnProcessRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessRequestActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblPatientProfileRequests.getSelectedRow();
         if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }
        EnterprisePatientProfileSearchWorkRequest profileWorkRequest = (EnterprisePatientProfileSearchWorkRequest)tblPatientProfileRequests
                .getValueAt(selectedRow, 0);
        PatientProfileWorkRequest wr = profileWorkRequest.getPatientProfileWorkRequest();
        int rowCount = tblEncounters.getRowCount();
        for(int i=0; i<rowCount; i++)
        {
            boolean isChecked = (boolean)tblEncounters.getValueAt(i, 0);
            if(isChecked)
            {
                Encounter encounter = (Encounter)tblEncounters.getValueAt(i, 1);
                wr.getSearchPatientContract().addEncounter(encounter);
            }
        }
        if(searchedPatient != null && (searchedPatient instanceof Patient))
        {
            Patient pat = (Patient)searchedPatient;
            wr.getSearchPatientContract().addAllergies(pat.getAllergyHistory().getAllergyList());
            wr.getSearchPatientContract().addSocialHabits(pat.getSocialHabitSummary().getSocialHabitsList());
        }
        profileWorkRequest.setStatus(WorkRequestStatusType.Completed);
        String sender = wr.getSender()!=null ? wr.getSender().getPerson().getName() : "";
        Logger logger = Logger.getLogger(this.getClass().toString());
        logger.log(Level.INFO,String.format("Search for PatientProfile requested by doctor:%s ", sender));
        if(rowCount!=0)
        {
            JOptionPane.showMessageDialog(null,"Request has been processed");
        }
        this.populateTable();
        this.clearTable();
    }//GEN-LAST:event_btnProcessRequestActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnListEncounters;
    private javax.swing.JButton btnProcessRequest;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEncounters;
    private javax.swing.JTable tblPatientProfileRequests;
    // End of variables declaration//GEN-END:variables
}
